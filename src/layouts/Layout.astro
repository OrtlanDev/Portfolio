---
import Footer from '@/components/sections/Footer.astro';
import Header from '@/components/sections/header/Header.astro';
import 'src/styles/global.css';
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="generator" content="{Astro.generator}" />
    <title>Portfolio - Orlando Torres Rojas</title>
    <link rel="stylesheet" href="https://unpkg.com/photoswipe@5/dist/photoswipe.css" />
  </head>

  <body class="font-josefin-sans bg-background" x-data="{theme:'dark'}" x-bind:data-theme="theme">
    <Header />
    <slot />
    <Footer />

    <!-- <script is:inline type="module" src="/src/assets/scripts/photoswipe-init.js" ></script> -->
  </body>
</html>
<!-- <script type="module">
  import PhotoSwipeLightbox from 'photoswipe/lightbox';

  const initGalleries = async () => {
    console.log('cargo');
    const galleryEls = document.querySelectorAll('[id^="project-gallery-"]');
    for (const galleryEl of galleryEls) {
      if (galleryEl.__pswpInit) continue;

      const anchors = Array.from(galleryEl.querySelectorAll('a[href]'));
      if (anchors.length === 0) continue;

      await Promise.all(
        anchors.map((anchor) => {
          anchor.dataset.pswpWidth = '1350';
          anchor.dataset.pswpHeight = '900';
        })
      );

      const lightbox = new PhotoSwipeLightbox({
        gallery: galleryEl,
        children: 'a',
        pswpModule: () => import('photoswipe').then((mod) => mod.default),
        showHideAnimationType: 'fade',
        loop: true,
        bgOpacity: 0.8,
        spacing: 0.1,
      });

      lightbox.init();
      galleryEl.__pswpInit = true;
    }
  };

  document.addEventListener('DOMContentLoaded', initGalleries);
  window.__initProjectGalleries = initGalleries;
</script> -->

<!-- <script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  async function setImageSizes() {
    const gallery = document.querySelector('#my-gallery');
    if (!gallery) return;

    const anchors = gallery.querySelectorAll('a[href]') as NodeListOf<HTMLAnchorElement>;
    const promises = Array.from(anchors).map(async (anchor) => {
      const href = anchor.getAttribute('href');
      const img = new Image();
      img.src = href || '';

      return new Promise<void>((resolve, reject) => {
        const img = new Image();
        img.src = href || '';

        img.onload = () => {
          anchor.dataset.pswpWidth = img.naturalWidth.toString();
          anchor.dataset.pswpHeight = img.naturalHeight.toString();
          resolve();
        };
        img.onerror = () => {
          console.warn(`[PhotoSwipe] No se pudo cargar la imagen: ${href}`);
          // Aun así resolvemos para no romper el flujo
          resolve();
        };
      });
    });

    await Promise.all(promises);
  }

  document.addEventListener('DOMContentLoaded', async () => {
    console.log('OK');
    await setImageSizes();
    console.log('OK2');
    const lightbox = new PhotoSwipeLightbox({
      gallery: '#my-gallery',
      children: 'a',
      pswpModule: () => import('photoswipe'),
      showHideAnimationType: 'fade',
      loop: true,
      bgOpacity: 0.8,
      spacing: 0.1,
    });

    lightbox.init();
  });
</script> -->

<!-- <script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  /**
   * Inicializa una galería PhotoSwipe para cada contenedor que tenga
   * un id que comience con "project-gallery-".
   */
  export const initGalleries = async (): Promise<void> => {
    // Buscar todos los contenedores de galería
    const galleryEls = document.querySelectorAll<HTMLElement>('[id^="project-gallery-"]');

    for (const galleryEl of galleryEls) {
      if ((galleryEl as any).__pswpInit) continue;

      const anchors = Array.from(galleryEl.querySelectorAll<HTMLAnchorElement>('a[href]'));
      if (anchors.length === 0) continue;

      await Promise.all(
        anchors.map(async (anchor) => {
          const img = anchor.querySelector<HTMLImageElement>('img');
          if (!img) return;

          if (img.complete) {
            anchor.dataset.pswpWidth = img.naturalWidth.toString();
            anchor.dataset.pswpHeight = img.naturalHeight.toString();
          } else {
            await new Promise<void>((resolve) => {
              img.onload = () => {
                anchor.dataset.pswpWidth = img.naturalWidth.toString();
                anchor.dataset.pswpHeight = img.naturalHeight.toString();
                resolve();
              };
              img.onerror = () => resolve();
            });
          }
        })
      );

      const lightbox = new PhotoSwipeLightbox({
        gallery: galleryEl,
        children: 'a',
        pswpModule: () => import('photoswipe'),
        showHideAnimationType: 'fade',
        loop: false,
        bgOpacity: 0.5,
        spacing: 0.1,
      });

      lightbox.init();
      (galleryEl as any).__pswpInit = true; // Marcar como inicializada
    }
  };

  // Ejecutar solo en el cliente
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      initGalleries().catch(console.error);
    });
  }
</script> -->

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';

  /*xx*
   * Inicializa todas las galerías PhotoSwipe con tamaños dinámicos.
   */
  export const initGalleries = async (): Promise<void> => {
    const galleryEls = document.querySelectorAll<HTMLElement>('[id^="project-gallery-"]');

    for (const galleryEl of galleryEls) {
      // Evita reinicializar si ya existe
      if ((galleryEl as any).__pswpInit) continue;

      const anchors = galleryEl.querySelectorAll<HTMLAnchorElement>('a[href]');
      if (!anchors.length) continue;

      // Calcula los tamaños basados en la imagen original (href)
      const promises = Array.from(anchors).map(async (anchor) => {
        const href = anchor.getAttribute('href');
        if (!href) return;

        await new Promise<void>((resolve) => {
          const img = new Image();
          img.src = href;
          img.onload = () => {
            anchor.dataset.pswpWidth = img.naturalWidth.toString();
            anchor.dataset.pswpHeight = img.naturalHeight.toString();
            resolve();
          };
          img.onerror = () => {
            console.warn(`[PhotoSwipe] No se pudo cargar la imagen: ${href}`);
            resolve(); // no romper flujo
          };
        });
      });

      await Promise.all(promises);

      // Inicializa PhotoSwipe solo para este contenedor
      const lightbox = new PhotoSwipeLightbox({
        gallery: galleryEl,
        children: 'a',
        pswpModule: () => import('photoswipe'),
        showHideAnimationType: 'fade',
        loop: false,
        bgOpacity: 0.75,
        spacing: 0.1,
      });

      lightbox.init();
      (galleryEl as any).__pswpInit = true;
    }
  };

  // Ejecutar solo en cliente
  if (typeof window !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
      initGalleries().catch(console.error);
    });
  }
</script>
